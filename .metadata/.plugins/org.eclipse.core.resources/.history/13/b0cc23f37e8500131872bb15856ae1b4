package com.photofilter;

import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.provider.MediaStore;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.ImageView;
import android.widget.Toast;

public class FilterMain extends Activity {

	private static int RESULT_LOAD_IMAGE = 1;
	private static int RESULT_SAVE_SETTINGS = 2;
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_filter_main);
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.filter_main, menu);
        return super.onCreateOptionsMenu(menu);
    }
    
    @Override
    public boolean onOptionsItemSelected(MenuItem item)
    {
    	switch(item.getItemId()) {
    	case R.id.action_choose_pic:
    		// We're going to get the picture here.
    		getPicture();
    		return true;
    	case R.id.action_settings:
    		// We're going to open the filter settings here.
    		openSettings();
    		return true;
    	case R.id.action_do_filter:
    		// We're going to apply the filter according to the settings.
    		applyFilter();
    	default:
    		return super.onOptionsItemSelected(item);
    	}
    }
    
    /*
     *  This method calls an external image app (Gallery, or Photo Gallery) to
     *  retrieve an image through the intent.
     */
    public void getPicture()
    {
    	Intent i = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
    	startActivityForResult(i, RESULT_LOAD_IMAGE);
    }
    
    /*
     * This method is called when we return from the getPicture() action.
     * We shall obtain the image, and then show it in our ImageView.
     * @see android.app.Activity#onActivityResult(int, int, android.content.Intent)
     */
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
         
        if (requestCode == RESULT_LOAD_IMAGE && resultCode == RESULT_OK && null != data) {
            Uri selectedImage = data.getData();
            String[] filePathColumn = { MediaStore.Images.Media.DATA };
 
            Cursor cursor = getContentResolver().query(selectedImage,
                    filePathColumn, null, null, null);
            cursor.moveToFirst();
 
            int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
            String picturePath = cursor.getString(columnIndex);
            cursor.close();
             
            ImageView imageView = (ImageView) findViewById(R.id.image);
            imageView.setImageBitmap(BitmapFactory.decodeFile(picturePath));
        }
        
    }
    
    /*
     * Start the Settings activity.
     */
    public void openSettings()
    {
    	Intent settingsIntent = new Intent(this, FilterSettingsActivity.class);
    	startActivityForResult(settingsIntent, RESULT_SAVE_SETTINGS);
    }
    
    public void applyFilter()
    {
        // Save the preferences to the local variables
    	SharedPreferences filterPreferences = PreferenceManager.getDefaultSharedPreferences(this);
    	String prefFilterType = filterPreferences.getString("prefFilterType", "");
    	String prefFilterSize = filterPreferences.getString("prefFilterSize", "");
    	
    	ImageView imageView = (ImageView) findViewById(R.id.image);
    	
    	// Let's check if there is a picture selected first.
    	if(imageView.getDrawable() == null)
    	{
    		Context context = getApplicationContext();
    		CharSequence text = "You need to pick a photo first!";
    		int duration = Toast.LENGTH_SHORT;

    		Toast toast = Toast.makeText(context, text, duration);
    		toast.show();
    	}
    	else
    	{
    		// Perform the filtering!
    		
    		// We are testing the settings!
    		Context context = getApplicationContext();
    		CharSequence text = "Type: " + prefFilterType + ", Size: " + prefFilterSize;
    		int duration = Toast.LENGTH_LONG;
    		
    		Toast toast = Toast.makeText(context, text, duration);
    		toast.show();
    		Bitmap inputImage = ((BitmapDrawable)imageView.getDrawable()).getBitmap();
    		imageView.setImageBitmap(filterBitmap(inputImage, prefFilterType, Integer.parseInt(prefFilterSize)));
    	}
    }
    
    public Bitmap filterBitmap(Bitmap image, String filterType, int filterSize)
    {
    	
    }
    
}

private class FilterImageTask extends AsyncTask<Bitmap, Void, Bitmap> {

	@Override
	protected Bitmap doInBackground(Bitmap... arg0) {
		Bitmap image = arg0[0];
		Bitmap returnImage = image.copy(Bitmap.Config.ARGB_8888, true);
    	int height = image.getHeight();
    	int width = image.getWidth();
    	for(int i = 0; i < height; i++)
    	{
    		for(int j = 0; j < width; j++)
    		{
    			returnImage.setPixel(j, i, 0);
    		}
    	}
    	return returnImage;
	}
	
}
}
